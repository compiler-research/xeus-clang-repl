name: Main
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  release:
    types: [published]
  schedule:
    - cron: '30 20 * * *' # Warning: Timezone dep - 20:00 is 1:00

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubu20-gcc9-clang14
            os: ubuntu-20.04
            compiler: gcc-9
            clang-runtime: '14'
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Save PR Info
      run: |
        mkdir -p ./pr
        echo ${{ github.event.number }} > ./pr/NR
        echo ${{ github.repository }} > ./pr/REPO
    - uses: nelonoel/branch-name@v1.0.1
    - name: Setup compiler on Linux
      if: runner.os == 'Linux'
      run: |
        # https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
        vers="${compiler#*-}"
        os_codename="`cat /etc/os-release | grep UBUNTU_CODENAME | cut -d = -f 2`"
        sudo apt update
        if [[ "${{ matrix.compiler }}" == *"gcc"* ]]; then
          sudo apt install -y gcc-${vers} g++-${vers}
          echo "CC=gcc-${vers}" >> $GITHUB_ENV
          echo "CXX=g++-${vers}" >> $GITHUB_ENV
        else
          if ! sudo apt install -y clang-${vers}; then
            curl https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            echo "deb https://apt.llvm.org/${os_codename}/ llvm-toolchain-${os_codename}-${vers} main" | sudo tee -a /etc/apt/sources.list
            sudo apt update
            sudo apt install -y clang-${vers}
          fi
          echo "CC=clang-${vers}" >> $GITHUB_ENV
          echo "CXX=clang++-${vers}" >> $GITHUB_ENV
        fi
      env:
        compiler: ${{ matrix.compiler }}
    - name: Cache LLVM/Clang runtime build directory
      uses: actions/cache@v3
      id: clang-dev-cache
      with:
        path: clang-dev
        key: ${{ runner.os }}-${{ matrix.os }}-${{ matrix.compiler }}-clang-${{ matrix.clang-runtime }}.x-patch-${{ hashFiles('patches/llvm/*') }}
    - name: Setup/Build runtime LLVM/Clang runtime on Linux
      if: runner.os == 'Linux'
      run: |
        # Warning: If this part of the clang build script is changed to give a different
        # result, then clear cache 'clang-dev-cache' by hand:
        # https://github.com/compiler-research/xeus-clang-repl/actions/caches
        UNIX_DISTRO=$(lsb_release -rs)
        if [[ "${{ steps.clang-dev-cache.outputs.cache-hit }}" != "true" ]]; then
          # Fetch clang-dev
          git clone --depth=1 --branch "release/${{ matrix.clang-runtime }}.x" --single-branch https://github.com/llvm/llvm-project.git clang-dev
          cd clang-dev
          # Apply patches
          git apply ../patches/llvm/*.patch
          # Build clang-dev
          mkdir build
          mkdir inst
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=host -DLLVM_OPTIMIZED_TABLEGEN=On -DLLVM_ENABLE_PROJECTS=clang -DCMAKE_INSTALL_PREFIX=../inst ../llvm
          make ClangDriverOptions clang-repl -j$(nproc --all)
          #make install -j$(nproc --all)
          #TODO: Clean unneeded folders...
        else
          cd clang-dev/build
        fi
        PATH_TO_LLVM_BUILD=`pwd`
        export PATH=$PATH_TO_LLVM_BUILD/bin:$PATH
        export LD_LIBRARY_PATH=$PATH_TO_LLVM_BUILD/lib:$LD_LIBRARY_PATH
        cd ../..
        # Tar prebuild clang-dev for dev binder containers
        tar -cjf clang-dev.tar.bz2 ./clang-dev
        # We need PATH_TO_LLVM_BUILD later
        echo "PATH_TO_LLVM_BUILD=$PATH_TO_LLVM_BUILD" >> $GITHUB_ENV
    - name: Add assets to Release
      id: add_release_assets
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          clang-dev.tar.bz2
    - name: Archive clang-dev artifact
      uses: actions/upload-artifact@v3
      with:
        name: clang-dev
        path: clang-dev.tar.bz2
        retention-days:  ${{ github.event_name=='schedule' && 2 || 7 }}
    - name: Install xeus-clang-repl deps on Linux
      if: runner.os == 'Linux' #TODO: exclude on release
      run: |
        # Install xeus-clang-repl deps
        conda update --all
        conda install -y -q -c conda-forge \
          'xeus>=2.0,<3.0' \
          'nlohmann_json>=3.9.1,<3.10' \
          'cppzmq>=4.6.0,<5' \
          'xtl>=0.7,<0.8' \
          pugixml \
          'cxxopts>=2.1.1,<2.2' \
          libuuid \
          pytest \
          jupyter_kernel_test
    - name: Build xeus-clang-repl on Linux
      if: runner.os == 'Linux' #TODO: exclude on release
      run: |
        # Build and Install xeus-clang-repl
        mkdir build
        cd build
        PP=$KERNEL_PYTHON_PREFIX
        if [[ -z "$PP" ]]; then
          PP=$(conda info --base)
        fi
        cmake -DCMAKE_PREFIX_PATH=$PP -DCMAKE_INSTALL_PREFIX=$PP -DCMAKE_INSTALL_LIBDIR=lib -DLLVM_CONFIG_EXTRA_PATH_HINTS=$PATH_TO_LLVM_BUILD -DLLVM_USE_LINKER=gold ..
        make install
    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
      # When debugging increase to a suitable value!
      timeout-minutes: ${{ github.event.pull_request && 1 || 20 }}
